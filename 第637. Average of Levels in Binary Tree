Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.

Example 1:
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].
思路:
这道题一共需要解决两个问题，第一个是计算每一层节点数值之和，另一个是每层节点数量。对于第一个问题，之前在剑指offer里有一个类似的问题
从上到下，从左到右打印字符串。其不能用递归，需要利用两个List来解决。对于第二个问题，因为此树不空，所以第一层有1个节点，我们设number初始为1，其代表
上一层的节点数量
设next_floor为0，其存储下一层节点数量，因为我们是根据上一层的节点来找该节点的左右子节点，从而来找下一层节点。每找到一个下一层节点,next_floor++，
上一层的一个节点遍历完,number--，number为0时代表上一层节点以遍历完，此时的next_floor便是下一层的总节点数，存储起来。
最终根据从上到下从左到右存储节点的list和存储每层节点数目的list来得到结果想要的list
代码:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        //之前做过一到从上到下打印二叉树。
        ArrayList<TreeNode> list_tree = new ArrayList<TreeNode>();
        ArrayList<TreeNode> list_tree2 = new ArrayList<TreeNode>();
        ArrayList<Integer> list_number = new ArrayList<Integer>();
        List<Double> list_result = new ArrayList<Double>();
        list_tree.add(root);
        list_tree2.add(root);
        int number = 1;
        int next_floor = 0;
        list_number.add(number);
        while(list_tree.size() > 0){
            if(list_tree.get(0).left != null){
                list_tree.add(list_tree.get(0).left);
                list_tree2.add(list_tree.get(0).left);
                next_floor++;
            }
            if(list_tree.get(0).right != null){
                list_tree.add(list_tree.get(0).right);
                list_tree2.add(list_tree.get(0).right);
                next_floor++;
            }
            number--;
            if(number == 0){
                list_number.add(next_floor);
                number = next_floor;
                next_floor = 0;
            }
            list_tree.remove(0);
        }
        
        int j = 0;
        long result = 0;
        for(int i = 0; i < list_tree2.size(); i++){
            result += list_tree2.get(i).val;
            j++;
            if(j == list_number.get(0)){
                list_result.add((double)result / j);
                j = 0;
                list_number.remove(0);
                result = 0;
            }
        }
        return list_result;
        
        
    }
}
