Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left 
for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

思路：这道题只是102Binary Tree Level Order Traversal   这道题的变形而已。从上到下从左到右记录好节点，并且记录好每层的个数后，
只需要初始化一个数字i，每次大循环自加，判断其为就就行，偶时将每层的值从左到右加入，为奇时从右到左加入
代码：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null){
            return result;
        }
        List<TreeNode> first = new ArrayList<TreeNode>();
        List<TreeNode> second = new ArrayList<TreeNode>();
        List<Integer> row_number = new ArrayList<Integer>();
        TreeNode head = root;
        first.add(head);
        second.add(head);
        row_number.add(1);
        TreeNode middle = null;
        int number = 0;
        int i = 0;
        int last_number = row_number.get(0);
        while(first.size() > 0){
            middle = first.get(0);
            if(middle.left != null){
                first.add(middle.left);
                second.add(middle.left);
                number++;
            }
            if(middle.right != null){
                first.add(middle.right);
                second.add(middle.right);
                number++;
            }
            first.remove(0);
            last_number--;
            if(last_number == 0){
                last_number = number;
                row_number.add(number);
                number = 0;
            }
        }
        int start = 0;
        int clock = 0;
        for(i = 0; i < row_number.size(); i++){
            int row = row_number.get(i);
            ArrayList<Integer> content = new ArrayList<Integer>();
            if(clock % 2 == 0){
                for(int j = 0; j < row; j++){
                    content.add(second.get(start + j).val);
                }
                result.add(content);
                start += row;
            }else{
                for(int j = row; j > 0; j--){
                    content.add(second.get(start + j - 1).val);
                }
                result.add(content);
                start += row;
            }
            clock++;
            
        }
        result.remove(result.size() - 1);
        return result;
        
    }
}
