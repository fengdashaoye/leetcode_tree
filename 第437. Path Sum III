题目：
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

思路：这道题难度为easy，起始非常简单。定义一个全局遍历为result，初始为0，然后利用先序遍历依次遍历树的每一个节点i。
以该节点i为子树的根节点，再创建一个函数，输入为该节点i，利用先序遍历判断是否存在某一段的和为sum，其主要是遍历时sum之变化
变成sum-root.val；
主要是二层先序遍历，第一层嵌套第二层。

代码：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int result = 0;
    public int pathSum(TreeNode root, int sum) {
        if(root == null){
            return result;
        }
        panduan(root, sum);
        return result;
        
    }
    public void panduan(TreeNode root, int sum){
        if(root == null){
            return;
        }
        panduan2(root, sum);
        panduan(root.left, sum);
        panduan(root.right, sum);
    }
    public void panduan2(TreeNode root, int sum){
        if(root == null){
            return;
        }
        if(root.val == sum){
            result++;
        }
        panduan2(root.left, sum - root.val);
        panduan2(root.right, sum - root.val);
    }
}
