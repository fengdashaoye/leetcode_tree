Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the 
length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.
思路:递归的返回值也可以不是最终值，递归有返回值，最终结果为一个全局变量，递归的返回值只是为了得到这个全局变量。
以上面例子为例，首先递归到4，其left=0,right=0,最终没有改变result,此时返回Math.max(left, right) + 1;即返回1，返回的是其最大深度+1，因为
是max(left, right)加的1，那么此时看到到了节点2，其左子树最大深度为1，然后看起右子树，对于5，其left=0,right=0,最终没有改变result,此时
返回Math.max(left, right) + 1;即返回1，此时看到到了节点2，其left为1，其right返回1，此时result可以更新为2,此时返回的为最大深度。
在不断返回最大深度的同时比较最终result。

代码:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int result = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        getDeep(root);
        return result;
        
        
    }
    public int getDeep(TreeNode root){
        if(root == null){
            return 0;
        }
        int left = getDeep(root.left);
        int right = getDeep(root.right);
        if(left + right > result){
            result = left + right;
        }
        return Math.max(left, right) + 1;
        
        
        
    }
    
    
}

