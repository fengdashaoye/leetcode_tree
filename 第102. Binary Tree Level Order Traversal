Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

思路：这道题已经做过很多遍了，首先主体是从上到下，从左到右保存每一个节点，这里用到两个list。在存储每行节点的数量时，如计算i行节点的数量，
因为i行的节点是通过i-1行节点进行遍历的，因此number_list中此时已经存储i-1行节点的数量，如果i-1行节点的数量自减到0时，number自加，此时的数量就是
i行的节点数量，存储进number_list中。
代码：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null){
            return result;
        }
        List<TreeNode> first = new ArrayList<TreeNode>();
        List<TreeNode> second = new ArrayList<TreeNode>();
        List<Integer> row_number = new ArrayList<Integer>();
        TreeNode head = root;
        first.add(head);
        second.add(head);
        row_number.add(1);
        TreeNode middle = null;
        int number = 0;
        int i = 0;
        int last_number = row_number.get(0);
        while(first.size() > 0){
            middle = first.get(0);
            if(middle.left != null){
                first.add(middle.left);
                second.add(middle.left);
                number++;
            }
            if(middle.right != null){
                first.add(middle.right);
                second.add(middle.right);
                number++;
            }
            first.remove(0);
            last_number--;
            if(last_number == 0){
                last_number = number;
                row_number.add(number);
                number = 0;
            }
        }
        int start = 0;
        for(i = 0; i < row_number.size(); i++){
            int row = row_number.get(i);
            ArrayList<Integer> content = new ArrayList<Integer>();
            for(int j = 0; j < row; j++){
                content.add(second.get(start + j).val);
            }
            result.add(content);
            start += row;
        }
        result.remove(result.size() - 1);
        return result;
        
    }
}

