Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest 
node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node 
can be a descendant of itself according to the LCA definition.

思路：
原本思路：寻找根节点到节点p,q的路径。根据两条路径找到第一个分歧点，则分歧点之前的那个节点即是两节点的最低父节点。但是报错了
不知道为什么。。。超时
别人的方法：
在二叉树中来搜索p和q，然后从路径中找到最后一个相同的节点即为父节点
代码:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List<TreeNode>> list;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q){
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if(left == null){
            return right;
        }else if(right == null){
            return left;
        }
        return root;
    }
    
}

原本思路：寻找根节点到节点p,q的路径。根据两条路径找到第一个分歧点，则分歧点之前的那个节点即是两节点的最低父节点。但是报错了
不知道为什么。。。超时
代码：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List<TreeNode>> list;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q){
            return root;
        }
        list = new ArrayList<List<TreeNode>>();
        xianxu(root, p, q, new ArrayList<TreeNode>());
        List<TreeNode> before = list.get(0);
        List<TreeNode> after = list.get(1);
        int count = 0;
        while(count < before.size() && count < after.size() && before.get(count) == after.get(count)){
            count++;
        }
        if(count == after.size()){
            return after.get(count - 1);
        }
        return before.get(count - 1);
    }
    public void xianxu(TreeNode root, TreeNode p, TreeNode q, ArrayList<Integer> content){
        if(root == null){
            return;
        }
        content.add(root);
        if(root == p || root == q){
            list.add(new ArrayList<TreeNode>(content));
        }
        xianxu(root.left, p, q, content);
        xianxu(root.right, p, q, content);
        content.remove(content.size() - 1);
    }
    
}
别人的写根节点到p节点和q节点的路径的方法，超时了，跟我的方法写的差不多
代码：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q){
            return root;
        }
        ArrayList<TreeNode> path_p = new ArrayList<TreeNode>();
        ArrayList<TreeNode> path_q = new ArrayList<TreeNode>();
        path_p.add(root);
        path_q.add(root);
        getpath(root, p, path_p);
        getpath(root, q, path_q);
        int count = 0;
        while(count < path_p.size() && count < path_q.size() && path_p.get(count) == path_q.get(count)){
            count++;
        }
        if(count == path_q.size()){
            return path_q.get(count - 1);
        }
        return path_p.get(count - 1);
        
    }
    public boolean getpath(TreeNode root, TreeNode p, ArrayList<TreeNode> path_p){
        if(root == p){
            return true;
        }
        if(root.left != null){
            path_p.add(root.left);
            if(getpath(root.left, p, path_p)){
                return true;
            }
            path_p.remove(path_p.size() - 1);
        }
        if(root.right != null){
            path_p.add(root.right);
            if(getpath(root.right, p, path_p)){
                return true;
            }
            path_p.remove(path_p.size() - 1);
        }
        return false;
    }
    
}

