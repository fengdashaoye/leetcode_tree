Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree 
has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its 
two sub-nodes.

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.

If no such second minimum value exists, output -1 instead.
Example 1:
Input: 
    2
   / \
  2   5
     / \
    5   7

Output: 5
Explanation: The smallest value is 2, the second smallest value is 5.
Example 2:
Input: 
    2
   / \
  2   2

Output: -1
Explanation: The smallest value is 2, but there isn't any second smallest value.
思路:因为每个节点的值为其子节点的值的较小者。前者需要看右子树，后者需要看左子树。因此不能分看看左右子树。因为因为每个节点的值为其子节点的值的较小者。
所以看叶子节点即可。

    2
   / \
  2   5
     / \
    5   7
    
    2
   / \
  2     5
 / \   / \
2   3 5   7
    

代码:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    ArrayList<Integer> result = new ArrayList<Integer>();
    public int findSecondMinimumValue(TreeNode root) {
        findMin(root);
         Comparator c = new Comparator<Integer>() {   
            public int compare(Integer o1, Integer o2) {  
                // TODO Auto-generated method stub  
                if((int)o1<(int)o2)  
                    return 1;  
                //注意！！返回值必须是一对相反数，否则无效。jdk1.7以后就是这样。  
                // else return 0; //无效  
                else return -1;  
            }  
        };
        Collections.sort(result);
        int fiResult = -1;
        for(int i = 1; i < result.size(); i++){
            if(result.get(i) > result.get(i - 1)){
                fiResult = result.get(i);
                break;
            }
        }
        return fiResult;
        
    }
    public void findMin(TreeNode root){
        if(root.left == null && root.right == null){
            result.add(root.val);
            return;
        }
        if(root.left != null){
            findMin(root.left);
        }
        if(root.right != null){
            findMin(root.right);
        }
    }
}
