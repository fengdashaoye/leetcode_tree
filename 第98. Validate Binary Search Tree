Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.

思路：判断是不是二叉搜索树，判断其中序遍历为升序即可。

代码：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null || (root.left == null && root.right == null)){
            return true;
        }
        ArrayList<Integer> result = new ArrayList<Integer>();
        zhongxu(root, result);
        for(int i = 1; i < result.size(); i++){
            if(result.get(i) <= result.get(i - 1)){
                return false;
            }
        }
        return true;
    }
    public void zhongxu(TreeNode root, ArrayList<Integer> result){
        if(root == null){
            return;
        }
        zhongxu(root.left, result);
        result.add(root.val);
        zhongxu(root.right, result);
    }
}
