Given a binary search tree and the lowest and highest boundaries as L and R, trim the tree so that 
all its elements lies in [L, R] (R >= L). You might need to change the root of the tree, so the result should 
return the new root of the trimmed binary search tree.

Example 1:
Input: 
    1
   / \
  0   2

  L = 1
  R = 2

Output: 
    1
      \
       2
Example 2:
Input: 
    3
   / \
  0   4
   \
    2
   /
  1

  L = 1
  R = 3

Output: 
      3
     / 
   2   
  /
 1
 思路:用递归来实现。从根结点开始， 
如果节点值小于L，则砍掉左子树，只留右子树，对右子树进行修剪 
如果节点值大于R，则砍掉右子树，只留左子树，对左子树进行修剪 
如果节点值位于[L,R]范围内，则递归，分别对左右子树进行修剪.
在写的时候我们需要知道的是这个函数本身就是一个修剪的函数，返回的是修剪好的树(整树或者子树)的根节点。因此来修剪
代码:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int L, int R) {
        if(root == null){
            return root;
        }
        if(root.val < L){
            return trimBST(root.right, L, R);
        }else if(root.val > R){
            return trimBST(root.left, L, R);
        }else{
            root.left = trimBST(root.left, L, R);
            root.right = trimBST(root.right, L, R);
            return root;
        }
    
        
    }
    
}
 
 
 
 
