Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, 
level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

这道题只是之前一条层层遍历树的这道题的变形，只要得到层层遍历树的结果以及每层节点的数量即可。
代码:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null){
            return result;
        }
        ArrayList<Integer> content1 = new ArrayList<Integer>();
        ArrayList<TreeNode> content2 = new ArrayList<TreeNode>();
        ArrayList<Integer> length = new ArrayList<Integer>();
        int start_number = 1;
        length.add(start_number);
        content2.add(root);
        TreeNode fen;
        int number = 0;
        while(content2.size() > 0){
            fen = content2.get(0);
            content1.add(fen.val);
            if(fen.left != null){
                content2.add(fen.left);
                number++;
            }
            if(fen.right != null){
                content2.add(fen.right);
                number++;
            }
            start_number--;
            if(start_number == 0){//每行个数
                length.add(number);
                start_number = number;
                number = 0;
            }
            content2.remove(0);
        }
        for(int i = 0; i < content1.size(); i++){
            System.out.println(content1.get(i));
        }
        for(int i = 0; i < length.size(); i++){
            System.out.println(length.get(i));
        }
        length.remove(length.size() - 1);//因为最后为0
        while(length.size() > 0){
            List<Integer> content = new ArrayList<Integer>();
            int i = content1.size() - length.get(length.size() - 1);
            int j = 0;
            while(j < length.get(length.size() - 1)){
                content.add(content1.get(i + j));
                j++;
            }
            j = 0;
            while(j < length.get(length.size() - 1)){
                content1.remove(content1.size() - 1);
                j++;
            }
            
            result.add(content);
            length.remove(length.size() - 1);
        }
        return result;
        
    }
}
